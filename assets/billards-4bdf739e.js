import{W as K,S as Q,P as X,O as Y,a as Z,C as r,M as d,b as l,c as $,B as j,d as ee,V as a,e as oe}from"./OrbitControls-229c7648.js";const te=.3,ne=9.8,w=new K;w.setSize(window.innerWidth,window.innerHeight);document.body.appendChild(w.domElement);window.addEventListener("resize",function(){c.aspect=window.innerWidth/window.innerHeight,c.updateProjectionMatrix(),w.setSize(window.innerWidth,window.innerHeight)});const i=new Q,u=new oe;u.stop();let E=0;const c=new X(90,window.innerWidth/window.innerHeight,.1,1e3);c.position.set(0,200,300);const P=new Y(c,w.domElement);P.minDistance=300;P.maxDistance=700;const ie=new Z(280,140),W=new r;W.setRGB(.3,.6,.3);const le=new d({color:W}),g=new l(ie,le);g.rotation.x=$.degToRad(-90);g.position.y=0;i.add(g);const D=new j(280,20,10),F=new r;F.setRGB(.6,.3,.3);const y=new d({color:F}),b=new l(D,y);b.position.z=-70;b.position.y=10;i.add(b);const f=new l(D,y);f.position.z=70;f.position.y=10;i.add(f);const H=new j(10,20,140),_=new l(H,y);_.position.y=10;_.position.x=140;i.add(_);const B=new l(H,y);B.position.y=10;B.position.x=-140;i.add(B);window.setPlay=T;function T(){u.start()}document.getElementById("play_button").addEventListener("click",T);class C{constructor(e,o){this.name=o,this.ball=e,this.velocity=new a(0,0,0),this.mass=5,this.radius=4,this.hasCollided=!1}setVelocity(e){this.velocity=e}ballCollisionDetection(e){const o=this.ball,h=e.ball;let s=o.position.distanceTo(h.position),m=this.radius+e.radius;if(s<=m&&(this.hasCollided==!1||e.hasCollided==!1)){console.log("Collision detected",E,this.name,e.name);let t=new a().subVectors(h.position,o.position).normalize();this.hasCollided=!0,e.hasCollided=!0;let R=this.radius+e.radius-this.ball.position.distanceTo(e.ball.position),p=t.clone().multiplyScalar(R/2);this.ball.position.sub(p),e.ball.position.add(p);let v=this.velocity.clone(),q=e.velocity.clone(),I=new a().subVectors(q,v).dot(t)*this.mass/2,V=t.clone().multiplyScalar(I),U=this.velocity.clone().multiplyScalar(this.mass).add(V).divideScalar(this.mass),J=e.velocity.clone().multiplyScalar(e.mass).sub(V).divideScalar(e.mass);this.velocity=U,e.velocity=J}}update(e){if(this.velocity.length()>=1e-4){const t=te*this.mass*ne,p=this.velocity.clone().normalize().multiplyScalar(-t).multiplyScalar(e),v=this.velocity.clone().multiplyScalar(this.mass).add(p);this.velocity.copy(v.divideScalar(this.mass))}const o=this.velocity.clone().multiplyScalar(e),h=this.ball.position.clone().add(o);this.ball.position.copy(h);const s=8;for(let t=0;t<n.length;t++){var m=n[t];m.name!=this.name&&this.ballCollisionDetection(m)}(this.ball.position.x-s<=-140||this.ball.position.x+s>=140)&&(this.velocity.x*=-1),(this.ball.position.z-s<=-70||this.ball.position.z+s>=70)&&(this.velocity.z*=-1)}}const S=new ee(4),k=new r;k.setRGB(.9,.9,.9);const se=new d({color:k}),M=new l(S,se);M.position.y=4;i.add(M);const A=new C(M,"Cue");A.setVelocity(new a(100,0,75));const L=new r;L.setRGB(.9,.1,.1);const ae=new d({color:L}),z=new l(S,ae);z.position.copy(new a(25,4,15));i.add(z);const ce=new C(z,"Red"),O=new r;O.setRGB(.1,.9,.1);const re=new d({color:O}),G=new l(S,re);G.position.copy(new a(30,4,30));i.add(G);const de=new C(G,"Green");let n=[];n.push(A);n.push(ce);n.push(de);function N(){requestAnimationFrame(N);var x=u.getDelta();E=u.getElapsedTime();for(let o=0;o<n.length;o++){var e=n[o];e.update(x)}for(let o=0;o<n.length;o++){var e=n[o];e.hasCollided=!1}w.render(i,c)}N();
